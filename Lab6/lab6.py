from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.ofproto import ether
from ryu.ofproto import inet
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import arp
from ryu.lib.packet import ipv4
from ryu.lib.packet import tcp
from ryu.lib.packet import udp
from operator import attrgetter
from ryu.lib import hub
import socket
import struct
import time


# SimpleSwitch13 + SimpleMonitor
class SimpleSwitch13(app_manager.RyuApp):

    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]



    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.datapaths = {}
        self.monitor_thread = hub.spawn(self._monitor)
        self.starttime = time.time()
        # arp table: for searching
        self.arp_table={}
        self.arp_table['10.0.0.1'] = '00:00:00:00:00:01'
        self.arp_table['10.0.0.2'] = '00:00:00:00:00:02'
        self.arp_table['10.0.0.3'] = '00:00:00:00:00:03'





    @set_ev_cls(ofp_event.EventOFPStateChange,[MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if not datapath.id in self.datapaths:
                self.logger.debug('register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]


    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(5)


    def _request_stats(self, datapath):
        endtime = time.time()
        timeinterval = int(endtime - self.starttime)
        print('send stats request: %016x at %6d' %(datapath.id, timeinterval))
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        match = parser.OFPMatch(wildcards=ofproto.OFPFW_ALL)
        table_id = 0xff
        out_port = ofproto.OFPP_NONE

        req = parser.OFPFlowStatsRequest(datapath, 0, match, 0, ofproto.OFPP_NONE)
        datapath.send_msg(req)

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_NONE)
        datapath.send_msg(req)


    @set_ev_cls(ofp_event.EventOFPFlowStatsReply, MAIN_DISPATCHER)
    def _flow_stats_reply_handler(self, ev):
        H1temp = 0
        H2temp = 0
        datapath = ev.msg.datapath
        endtime = time.time()
        timeinterval = int(endtime - self.starttime)
        body = ev.msg.body

        print('datapath         '
              'src-ip     dst-ip     '
              'out-port protocol     GBytes    time    ')
        print('---------------- '
              '------------ ------------ '
              '-------- -------- ------------ --------')
        for stat in sorted([flow for flow in body],
                            key=lambda flow: (flow.match.nw_src, flow.match.nw_dst)):
            if len(stat.actions) == 1:
                port = stat.actions[0].port
            else:
                port = "null"
            print('%016x %12s %12s %8s %8s %12.4f %5d' %
                  (datapath.id,
                   socket.inet_ntoa(struct.pack('!L', stat.match.nw_src)),
                   socket.inet_ntoa(struct.pack('!L', stat.match.nw_dst)), port,
                   stat.match.nw_proto, float(stat.byte_count)/(1024**3),
                   timeinterval))
            if datapath.id == 1:
                if port == 1 or port == 2:
                    H2temp += float(stat.byte_count)/(1024**3)
            if datapath.id == 2:
                if port == 1 or port == 2:
                    H1temp += float(stat.byte_count)/(1024**3)
        if datapath.id == 1:
            try:
                SwitchFlow2.append(H2temp)
                file = open('SwitchFlow2.txt', 'ab')
                file.write('At time %d, flow generated by Host 3 and 4 per second is %.2f GBytes. \n' %(timeinterval,(SwitchFlow2[-1]-SwitchFlow2[-2])/5.0))
                file.close()
            except:
                pass
        if datapath.id == 2:
            try:
                SwitchFlow1.append(H1temp)
                file = open('SwitchFlow1.txt', 'ab')
                file.write('At time %d, flow generated by Host 1 and 2 per second is %.2f GBytes. \n' %(timeinterval,(SwitchFlow1[-1]-SwitchFlow1[-2])/5.0))
                file.close()
            except:
                pass



    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def _port_stats_reply_handler(self, ev):
        endtime = time.time()
        timeinterval = int(endtime - self.starttime)
        body = ev.msg.body
        datapath = ev.msg.datapath
        self.logger.info('datapath         port     '
                         'rx-pkts  rx-bytes rx-error '
                         'tx-pkts  tx-bytes tx-error')
        self.logger.info('---------------- -------- '
                         '-------- -------- -------- '
                         '-------- -------- --------')
        for stat in sorted(body, key=attrgetter('port_no')):
            self.logger.info('%016x %8x %8d %8d %8d %8d %8d %8d',
                             datapath.id, stat.port_no,
                             stat.rx_packets, stat.rx_bytes, stat.rx_errors,
                             stat.tx_packets, stat.tx_bytes, stat.tx_errors)

            if datapath.id == 1 and stat.port_no == 4:
                try:
                    f1 = open('link13.txt', 'ab')
                    link13.append(stat.rx_bytes + stat.tx_bytes)
                    rate = (link13[-1]-link13[-2])*800.00/2/(1024**3)/5
                    f1.write('At time %d, ultilization rate of link13 per second is %.2f percent. \n' %(timeinterval,rate))
                    f1.close()
                except:
                    pass
            if datapath.id == 2 and stat.port_no == 3:
                try:
                    f2 = open('link12.txt', 'ab')
                    link12.append(stat.rx_bytes + stat.tx_bytes)
                    rate = (link12[-1]-link12[-2])*800.00/2/(1024**3)/5
                    f2.write('At time %d, ultilization rate of link12 per second is %.2f percent. \n' %(timeinterval,rate))
                    f2.close()
                except:
                    pass
            if datapath.id == 3 and stat.port_no == 1:
                try:
                    f3 = open('link23.txt', 'ab')
                    link23.append(stat.rx_bytes + stat.tx_bytes)
                    rate = (link23[-1]-link23[-2])*800.00/2/(1024**3)/5
                    f3.write('At time %d, ultilization rate of link23 per second is %.2f percent. \n' %(timeinterval,rate))
                    f3.close()
                except:
                    pass











    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # Insert Static rule
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

        # Installing static rules to process TCP/UDP and ICMP and ACL
        dpid = datapath.id  # classifying the switch ID
        if dpid == 1: # switch S1
            ### implement tcp fwding   hint: please use the add_layer4_rules() methods
            ### hint: self.add_layer4_rules(datapath, inet.IPPROTO_TCP, '10.0.0.1', 10, 1)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.1', 10, 1)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.2', 10, 2)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.3', 10, 3)


        elif dpid == 3: # switch S3
            # fwding everthing between port 1 and port 2
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.1', 10, 1)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.2', 10, 2)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.3', 10, 2)

        elif dpid == 3:
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.1', 10, 2)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.2', 10, 1)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.3', 10, 2)

        elif dpid == 5: # switch S5
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.1', 10, 2)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.2', 10, 2)
            self.add_layer4_rules(datapath, inet.IPPROTO_UDP, '10.0.0.3', 10, 1)

        else:
            print "wrong switch"


    """
        Call back method for PacketIn Message
        This is the call back method when a PacketIn Msg is sent
        from a switch to the controller
        It handles L3 classification in this function:
    """
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        in_port = msg.match['in_port']
        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocol(ethernet.ethernet)
        ethertype = eth.ethertype

        # process ARP
        if ethertype == ether.ETH_TYPE_ARP:
            self.handle_arp(datapath, in_port, pkt)
            return

        # process IP
        if ethertype == ether.ETH_TYPE_IP:
            self.handle_ip(datapath, in_port, pkt)
            return

    # Member methods you can call to install TCP/UDP/ICMP fwding rules
    def add_layer4_rules(self, datapath, ip_proto, ipv4_dst = None, priority = 1, fwd_port = None):
        parser = datapath.ofproto_parser
        actions = [parser.OFPActionOutput(fwd_port)]
        match = parser.OFPMatch(eth_type = ether.ETH_TYPE_IP,
                                ip_proto = ip_proto,
                                ipv4_dst = ipv4_dst)
        self.add_flow(datapath, priority, match, actions)

    # Member methods you can call to install general rules
    def add_flow(self, datapath, priority, match, actions):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                             actions)]

        mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                match=match, instructions=inst)
        datapath.send_msg(mod)

    """
        Methods to handle ARP. In this implementation the controller
        generates the ARP reply msg back to the host who initiate it.
        So the controller should parse out the ARP request;
        Search the ARP table for correponding dst MAC;
        Generate ARP reply;
        And finally use PacketOut Message to send back the ARP reply
    """
    def handle_arp(self, datapath, in_port, pkt):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # parse out the ethernet and arp packet
        eth_pkt = pkt.get_protocol(ethernet.ethernet)
        arp_pkt = pkt.get_protocol(arp.arp)
        # obtain the MAC of dst IP
        arp_resolv_mac = self.arp_table[arp_pkt.dst_ip]

        ### generate the ARP reply msg, please refer RYU documentation
        ### the packet library section
        ether_hd = ethernet.ethernet(dst = eth_pkt.src, src = arp_resolv_mac, ethertype = ether.ETH_TYPE_ARP)
        arp_hd = arp.arp(hwtype = 1, proto = 2048, hlen = 6, plen = 4, opcode = 2, src_mac = arp_resolv_mac, src_ip = arp_pkt.dst_ip, dst_mac = eth_pkt.src, dst_ip = arp_pkt.src_ip)
        arp_reply = packet.Packet()
        arp_reply.add_protocol(ether_hd)
        arp_reply.add_protocol(arp_hd)
        arp_reply.serialize()
        ### hint: ether_hd = ethernet.ethernet(dst = eth_pkt.src,
        ###                      src = arp_resolv_mac,
        ###                      ethertype = ether.ETH_TYPE_ARP);
        ###       arp_hd = arp.arp(hwtype = 1, ...
        ###       arp_reply = packet.Packet();
        ###       arp_reply.add_protocol(ether_hd)
        ###       ...

        # send the Packet Out mst to back to the host who is initilaizing the ARP
        actions = [parser.OFPActionOutput(in_port)];
        out = parser.OFPPacketOut(datapath, ofproto.OFP_NO_BUFFER,
                                  ofproto.OFPP_CONTROLLER, actions,
                                  arp_reply.data)
        datapath.send_msg(out)

    """
        Methods to handle TCP/IP. In this implementation the controller
        generate the TCP RST for connections between h1 and h3.
        In switch_features_handler() you should put a static rule to fwd
        those packets to the controller, and in handle_ip() you need to
        generate and return the TCP RST with PacketOut Message
    """
    def handle_ip(self, datapath, in_port, pkt):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        ipv4_pkt = pkt.get_protocol(ipv4.ipv4) # parse out the IPv4 pkt

        if datapath.id == 1 and ipv4_pkt.proto == inet.IPPROTO_TCP:
            tcp_pkt = ipv4_pkt.get_protocol(tcp.tcp) # parser out the TCP pkt

            ### generate the TCP packet with the RST flag set to 1
            ### packet generation is similar to ARP,
            ### but you need to generate ethernet->ip->tcp and serialize it
            eth_pkt = ipv4_dst.get_protocol(ethernet, ethernet)
            tcp_hd = tcp.tcp(ack = tcp_pkt.seq + 1, src_port = tcp_pkt.dst_port, dst_port = tcp_pkt.src_port, bits = 20)
            ip_hd = ipv4.ipv4(dst = ipv4_pkt.src, src = ipv4_pkt.dst, proto = ipv4_pkt.proto)
            ether_hd = ethernet.ethernet(ethertype = ether.ETH_TYPE_IP, dst = eth_pkt.src, src = eth_pkt.dst)
            tcp_rst_ack = packet.Packet()
            tcp_rst_ack.add_protocol(ether_hd)
            tcp_rst_ack.add_protocol(ip_hd)
            tcp_rst_ack.add_protocol(tcp_hd)
            tcp_rst_ack.e()
        # send the Packet Out mst to back to the host who is initilaizing the ARP
            actions = [parser.OFPActionOutput(in_port)];
            out = parser.OFPPacketOut(datapath, ofproto.OFP_NO_BUFFER,
                                      ofproto.OFPP_CONTROLLER, actions,
                                      tcp_rst_ack.data)
            datapath.send_msg(out)
